// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "description": "Returns all available quiz categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all quiz categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CategoryResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/quiz": {
            "get": {
                "description": "Get a random quiz by sub category\nReturns a random quiz question",
                "consumes": [
                    "application/json",
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "tags": [
                    "quiz",
                    "quiz"
                ],
                "summary": "Get a random quiz",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sub Category",
                        "name": "sub_category",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.QuizResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/quiz/check": {
            "post": {
                "description": "Check an answer for a quiz\nChecks if the provided answer is correct",
                "consumes": [
                    "application/json",
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "tags": [
                    "quiz",
                    "quiz"
                ],
                "summary": "Check quiz answer",
                "parameters": [
                    {
                        "description": "Answer Request",
                        "name": "answer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CheckAnswerRequest"
                        }
                    },
                    {
                        "description": "Answer details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CheckAnswerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CheckAnswerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/middleware.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Answer": {
            "description": "Detailed result of a user's answer evaluation",
            "type": "object",
            "properties": {
                "accuracy": {
                    "description": "답변 정확도 (0.0 ~ 1.0)",
                    "type": "number"
                },
                "answeredAt": {
                    "type": "string"
                },
                "completeness": {
                    "description": "답변 완성도 (0.0 ~ 1.0)",
                    "type": "number"
                },
                "explanation": {
                    "description": "LLM이 생성한 피드백",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "keywordMatches": {
                    "description": "매칭된 키워드들",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "quizID": {
                    "type": "integer"
                },
                "relevance": {
                    "description": "답변 관련성 (0.0 ~ 1.0)",
                    "type": "number"
                },
                "score": {
                    "description": "0.0 ~ 1.0 사이의 점수",
                    "type": "number"
                },
                "userAnswer": {
                    "description": "서술형 답변",
                    "type": "string"
                }
            }
        },
        "dto.CategoryResponse": {
            "description": "Category information",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CheckAnswerRequest": {
            "description": "Request body for checking a quiz answer",
            "type": "object",
            "properties": {
                "quiz_id": {
                    "description": "Quiz ID to check",
                    "type": "integer",
                    "example": 1
                },
                "user_answer": {
                    "description": "User's answer text",
                    "type": "string",
                    "example": "답안"
                }
            }
        },
        "dto.CheckAnswerResponse": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "description": "답변 정확도 (0.0 ~ 1.0)",
                    "type": "number"
                },
                "completeness": {
                    "description": "답변 완성도 (0.0 ~ 1.0)",
                    "type": "number"
                },
                "explanation": {
                    "description": "LLM이 생성한 피드백",
                    "type": "string"
                },
                "keyword_matches": {
                    "description": "Matched keywords from the user's answer @param KeywordMatches body []string false \"매칭된 키워드 목록\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "model_answers": {
                    "description": "ModelAnswers represents the model answers (선택적) @param ModelAnswers body []string false \"모범 답안 목록\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "next_quiz_id": {
                    "description": "다음 문제 ID (유사도 기반)",
                    "type": "integer"
                },
                "relevance": {
                    "description": "답변 관련성 (0.0 ~ 1.0)",
                    "type": "number"
                },
                "score": {
                    "description": "종합 점수 (0.0 ~ 1.0)",
                    "type": "number"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dto.QuizResponse": {
            "description": "Quiz information",
            "type": "object",
            "properties": {
                "diff_level": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "keywords": {
                    "description": "Keywords associated with the quiz @param Keywords body []string false \"키워드 목록\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "model_answers": {
                    "description": "Model answers for the quiz @param ModelAnswers body []string false \"모범 답안 목록\"",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "middleware.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8090",
	BasePath:         "/api",
	Schemes:          []string{"http", "https"},
	Title:            "Quiz Byte API",
	Description:      "This is the API for the Quiz Byte application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
